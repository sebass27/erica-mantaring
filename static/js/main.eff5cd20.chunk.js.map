{"version":3,"sources":["logo.svg","components/Nav.js","components/Layout.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MyNav","Navbar","bg","variant","Brand","href","Nav","className","Link","pageStyle","background","color","padding","Layout","props","Fragment","style","children","width","height","Photo","src","url","Styled","About","from","opacity","marginTop","to","config","delay","duration","process","App","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,qICgB5BC,MAZf,WACI,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAA6B,KAA3C,gCACA,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAA6B,KAAvC,QACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAA6B,UAAvC,YCEhB,IAAMI,EAAY,CACdC,WAAY,YACZC,MAAO,QACPC,QAAS,UAGEC,EAff,SAAgBC,GACZ,OACI,kBAAC,IAAMC,SAAP,CAAgBC,MAAOP,GACnB,kBAAC,EAAD,MACCK,EAAMG,W,QCiCnB,IAAMR,EAAY,CACdC,WAAY,YACZC,MAAO,QACPC,QAAS,SACTM,MAAO,OACPC,OAAQ,QAGZ,SAASC,EAAMN,GACX,OACE,yBAAKO,IAAKP,EAAMQ,IAAKJ,MAAO,QAIlC,SAASK,EAAOT,GACZ,OACI,yBAAKE,MAAOF,EAAME,OACbF,EAAMG,UAKJO,MA1Df,WACE,OACE,kBAAC,IAAMT,SAAP,KACI,kBAAC,SAAD,CACIU,KAAM,CAACC,QAAQ,EAAGC,WAAY,IAC9BC,GAAI,CAACF,QAAQ,EAAGC,UAAW,GAC3BE,OAAQ,CAACC,MAAO,IAAKC,SAAU,OAG3B,SAACjB,GAAD,OACI,kBAACS,EAAD,CAAQP,MAAOF,GACX,kBAACM,EAAD,CAAOE,IAAG,UAAKU,GAAL,wBAK1B,kBAAC,SAAD,CACIP,KAAM,CAACC,QAAQ,EAAGC,WAAY,KAC9BC,GAAI,CAACF,QAAQ,EAAGC,UAAW,KAGvB,SAACb,GAAD,OACI,kBAACS,EAAD,CAAQP,MAAOF,GACX,kBAACS,EAAD,CAAQP,MAAOP,GACX,iI,uBCAbwB,MAjBf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAoC,IAC1C,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WCRQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eff5cd20.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport Nav from 'react-bootstrap/Nav'\r\n\r\nfunction MyNav() {\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href={process.env.PUBLIC_URL+\"/\"}>Erica Mantaring ‚ù§Ô∏è</Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href={process.env.PUBLIC_URL+\"/\"}>Home</Nav.Link>\r\n                <Nav.Link href={process.env.PUBLIC_URL+\"/about\"}>About</Nav.Link>\r\n            </Nav>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default MyNav;","import React from 'react';\r\nimport MyNav from './Nav'\r\n\r\nfunction Layout(props) {\r\n    return (\r\n        <React.Fragment style={pageStyle}>\r\n            <MyNav/>\r\n            {props.children}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst pageStyle = {\r\n    background: \"steelblue\",\r\n    color: \"white\",\r\n    padding: \"1.5rem\"\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport {useSpring, animated} from 'react-spring'\r\nimport {Spring} from 'react-spring/renderprops'\r\n\r\nfunction About() {\r\n  return (\r\n    <React.Fragment>\r\n        <Spring\r\n            from={{opacity:0, marginTop: -10}}\r\n            to={{opacity:1, marginTop: 0}}\r\n            config={{delay: 500, duration: 1000}}\r\n        >\r\n            {\r\n                (props) => (\r\n                    <Styled style={props}>\r\n                        <Photo url={`${process.env.PUBLIC_URL}/images/me.JPG`}/>\r\n                    </Styled>\r\n                )\r\n            }\r\n        </Spring>\r\n        <Spring\r\n            from={{opacity:0, marginTop: -500}}\r\n            to={{opacity:1, marginTop: 0}}\r\n        >\r\n            {\r\n                (props) => (\r\n                    <Styled style={props}>\r\n                        <Styled style={pageStyle}>\r\n                            <p>\r\n                            I Love Sebastian Blissett very much! But I might Love our dog Yeti a bit more! üòâ\r\n                            </p>\r\n                        </Styled>\r\n                    </Styled>\r\n                )\r\n            }\r\n        </Spring>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst pageStyle = {\r\n    background: \"steelblue\",\r\n    color: \"white\",\r\n    padding: \"1.5rem\",\r\n    width: \"100%\",\r\n    height: \"100%\"\r\n}\r\n\r\nfunction Photo(props) {\r\n    return (\r\n      <img src={props.url} width={\"25%\"}/>\r\n    )\r\n  }\r\n\r\nfunction Styled(props) {\r\n    return (\r\n        <div style={props.style}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react';\nimport logo from './logo.svg';\nimport Layout from './components/Layout'\nimport About from './components/About'\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL || ''}>\n      <Layout>\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <About />\n          </Route>\n        </Switch>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}